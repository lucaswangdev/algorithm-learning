import{_ as t,r as e,o as p,c as o,b as n,d as s,a as c,f as l}from"./app-0f64466f.js";const i={},u=n("h1",{id:"_3-无重复字符的最长子串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-无重复字符的最长子串","aria-hidden":"true"},"#"),s(" 3. 无重复字符的最长子串")],-1),r={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1: 输入: s = &quot;abcabcbb&quot; 输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</p><p>示例 2: 输入: s = &quot;bbbbb&quot; 输出: 1 解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</p><p>示例 3: 输入: s = &quot;pwwkew&quot; 输出: 3 解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</p><h2 id="题解" tabindex="-1"><a class="header-anchor" href="#题解" aria-hidden="true">#</a> 题解</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Store the length of the longest substring</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Starting index of the current substring</span>
  <span class="token keyword">let</span> charMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map to store the index of each character</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> char <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>charMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> charMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// If the character is already present in the current substring</span>
      <span class="token comment">// Update the start to the next position after the repeated character</span>
      start <span class="token operator">=</span> charMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Update the index of the character in the map</span>
    charMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Update the maximum length if the current substring is longer</span>
    maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> i <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Test cases</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token string">&quot;abcabcbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token string">&quot;bbbbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token string">&quot;pwwkew&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 lengthOfLongestSubstring(s) 的实现思路是使用滑动窗口的方法来找到最长的没有重复字符的子串。 下面是具体的实现思路：</p><ul><li>定义一个变量 maxLength 来保存最长子串的长度。</li><li>定义一个变量 start 来表示当前子串的起始索引。</li><li>使用 Map 数据结构来存储字符和对应的索引。</li><li>遍历字符串 s：</li><li>对于每个字符 char，检查它是否已经存在于当前子串中，并且它的索引大于等于 start。</li><li>如果是，则说明遇到了重复字符，更新 start 到重复字符的下一个位置。</li><li>更新 char 在 Map 中的索引为当前索引。</li><li>更新 maxLength，如果当前子串比之前的子串更长，则更新为当前子串的长度（i - start + 1）。</li><li>返回 maxLength。</li><li>实现中使用了 Map 数据结构来存储字符和对应的索引，因为 Map 允许我们快速查找和更新每个字符的索引。通过维护子串的起始索引和字符的索引信息，我们可以确定是否存在重复字符，并在遇到重复字符时更新子串的起始索引。</li><li>通过使用滑动窗口的方法，我们只需遍历一次字符串 s，并在遇到重复字符时更新子串的起始索引，从而在线性时间复杂度内解决了问题。</li></ul>`,8);function d(m,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[s("题目链接"),c(a)])]),k])}const v=t(i,[["render",d],["__file","longest-substring-without-repeating-characters.html.vue"]]);export{v as default};
